service: serverless-course-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  environment:
    COURSES_TABLE: courses-app-${self:provider.stage}
    ATTACHMENT_S3_BUCKET: nhannt50-serverless-course-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300
    AUTH_0_SECRET_ID: nhannt50-Auth0Secret-${self:provider.stage}
    AUTH_0_CERTIFICATE: auth0Certificate


custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Courses API
        description: Courses management application
    models:
      - name: CreateCourseRequest
        contentType: application/json
        schema: ${file(models/create-course-model.json)}
      - name: UpdateCourseRequest
        contentType: application/json
        schema: ${file(models/update-course-model.json)}

functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn

  RS256Auth0Authorizer:
    handler: src/lambda/auth/rs256Auth0Authorizer.handler
    iamRoleStatements:
    - Effect: Allow
      Action:
        - secretsmanager:GetSecretValue
      Resource: !Ref Auth0Secret
    - Effect: Allow
      Action:
        - kms:Decrypt
      Resource: !GetAtt KMSKey.Arn

  GetCourses:
    handler: src/lambda/http/getCourses.handler
    events:
      - http:
          method: get
          path: courses
          cors: true
          authorizer: RS256Auth0Authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}

  CreateCourse:
    handler: src/lambda/http/createCourse.handler
    events:
      - http:
          method: post
          path: courses
          cors: true
          authorizer: RS256Auth0Authorizer
          reqValidatorName: RequestBodyValidator
          documentation: 
            requestModels: 
              application/json: CreateCourseRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}

  UpdateCourse:
    handler: src/lambda/http/updateCourse.handler
    events:
      - http:
          method: patch
          path: courses/{courseId}
          cors: true
          authorizer: RS256Auth0Authorizer
          reqValidatorName: RequestBodyValidator
          documentation: 
            requestModels: 
              application/json: UpdateCourseRequest
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}

  DeleteCourse:
    handler: src/lambda/http/deleteCourse.handler
    events:
      - http:
          method: delete
          path: courses/{courseId}
          cors: true
          authorizer: RS256Auth0Authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE} 

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: courses/{courseId}/attachment
          cors: true
          authorizer: RS256Auth0Authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*

  UpdateAttachmentUrl:
    handler: src/lambda/http/updateAttachmentUrl.handler
    events:
      - http:
          method: patch
          path: courses/{courseId}/attachment
          cors: true
          authorizer: RS256Auth0Authorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.COURSES_TABLE}

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
          
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        Name: 'request-body-validator'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: courseId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: courseId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.COURSES_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket

    KMSKey:
      Type: AWS::KMS::Key
      Properties:
        Description: KMS key to encrypt Auth0 secret
        KeyPolicy:
          Version: '2012-10-17'
          Id: key-default-1
          Statement:
            - Sid: Allow administration of the key
              Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                  - ':'
                  - - 'arn:aws:iam:'
                    - Ref: AWS::AccountId
                    - 'root'
              Action:
                - 'kms:*'
              Resource: '*'

    KMSKeyAlias:
      Type: AWS::KMS::Alias
      Properties:
        AliasName: alias/auth0Key-${self:provider.stage}
        TargetKeyId: !Ref KMSKey

    Auth0Secret:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: ${self:provider.environment.AUTH_0_SECRET_ID}
        Description: Auth0 secret
        KmsKeyId: !Ref KMSKey